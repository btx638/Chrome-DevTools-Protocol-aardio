import chrome.path;
import process;
import wsock;
import inet.whttp;
import inet.url;
import win.timer;
import thread.command;
import aaz.libhpsocket.listener.httpClient;
import aaz.libhpsocket.component.httpClient;

namespace aaz.chrome;
class dp{
	ctor(chromePath){	
		if(chromePath){
			if(!..io.exist(chromePath)){
				error(chromePath ++ " 文件不存在",2);
			}
		}
		else {
			chromePath = ..chrome.path();
			if(!chromePath){
				return null, "找不到 chrome 浏览器";
			}
		}

		this.timeout = 10000;
		this.chromeHost = null; 
		this.chromePort = null;
		
		var requests = {};
		var requestId = 0;
		var currentFiber;
		var chromePid;
		
		var yield = function(requestId){
			requests[requestId] = {
				tick = ..time.tick();
			}
			return ..fiber.yield(); 
		}
		
		var resume = function(requestId, ...){
			if(requests[requestId]){
				assert( ..fiber.resume(currentFiber, ...)); 
				requests[requestId] = null;
			}
		}
			
		var listener = ..aaz.libhpsocket.listener.httpClient();
		var component = ..aaz.libhpsocket.component.httpClient(listener);
			
		listener.onThreadCreated = function(){
			import web.json;
			import thread.command;
			import aaz.libhpsocket.helper.httpClient;
		}
		
		listener.onHandShake = function(component, connId){
			var wsPath = ..thread.get("wsPath")
			aaz.libhpsocket.helper.httpClient.sendWsUpgradeRequest(component, wsPath);
		}
		
		listener.onUpgrade = function(component, connId, upgradeType){
			if(1!= upgradeType){
				return 2; 
			}
			if(!aaz.libhpsocket.helper.httpClient.checkWsUpgradeResponse(component)){
				return 2; 
			}
			thread.command.post("onChromeConnect");
		}
		
		listener.onWsMessageHeader = function(component, connId, final, reserved, opCode, mask, bodyLen){
			aaz.libhpsocket.helper.httpClient.reallocString(component, bodyLen);
		}
		
		listener.onWsMessageBody = function(component, connId, pData, len){
			aaz.libhpsocket.helper.httpClient.appendString(component, pData, len);	
		}
		
		listener.onWsMessageComplete = function(component, connId){
			var json = aaz.libhpsocket.helper.httpClient.getString(component);
			if(json){
				var t = web.json.tryParse(json)
				if(type(t) == type.table){
					// 请求回复
					if(t.id){
						if(t.error){
							thread.command.post("onChromeResponse", t.id, null, t.error.message);
						}
						else {
							thread.command.post("onChromeResponse", t.id, t.result);
						}
					} // 订阅事件
					elseif(t.method){
					  	thread.command.post("onChromeEvent", t.method, t.params);
					}
				}
			}
		}
		
		listener.onClose = function(component,connId,enOperation,errCode){
			aaz.libhpsocket.helper.httpClient.reallocString(component, 0);
			thread.command.post("onChromeClose");
		}

		var checkTimeout = function(reqs){
			var now = ..time.tick();
			for(id, info in reqs){
				if((now-info.tick)>this.timeout){
    				resume(id, false, "timeout");
				}
			}
		}
		
		var timer = ..win.timer(null, 300);
		timer.onTimer = function(){
			if(!currentFiber) return ; 
			if(..fiber.status(currentFiber) != ..fiber.status.suspended) return ;
			checkTimeout(requests)
		}
		timer.enable()
		
		var thCmd = ..thread.command();
		thCmd.onChromeResponse = function(id, result, err){
    		resume(id, result, err);
		}

		thCmd.onChromeEvent = function(method, params){	
			resume(method, params)

			if(this[["onChromeEvent"]]){
				this.onChromeEvent(method, params)
			}
			
			// 浏览器关闭
			if(method == "Inspector.detached"){
				chromePid = null;
				currentFiber = null;
			}	
		}
		
		thCmd.onChromeConnect = function(){
			resume("connectChrome", true);
		}
				
		..table.gc(this, "close");
	}
	
	close = function(){
		this.closeChrome();
		timer.disable();
		component.stop();
		listener.destroy();	
	}
	
	init = function(){
		requests = {};
		requestId = 0;
	}
	
	waitEvent = function(name){
		return yield(name); 
	}
		
	openChrome = function(headless=false, userDataDir="\chrome.remote.userdata", port){
		port := ..wsock.getFreePort()
		var cmd = {
			"--remote-debugging-port=" ++ port;
			"--user-data-dir=" ++ ..io.createDir(userDataDir);
			"--disable-gpu";
		}
		if(headless){
			..table.push(cmd, "--headless");
		}
		
		cmd = ..string.join(cmd, " ");
		var pid, err = ..process.execute(chromePath, cmd);
		if(!pid){
			return null, "启动 chrome 失败，原因：" ++ err; 
		}
		chromePid = pid;
		this.chromeHost = "localhost";
		this.chromePort = port;
		
		return true; 
	}

	getRemoteInfo = function(host, port, path){
		var url = "http://" ++ host ++ ":" ++ port ++ path;

		var html, err, code = ..win.invoke(
			function(url){
				import inet.whttp;
				
				var whttp = inet.whttp();
				whttp.setTimeouts(3000, 3000, 3000);
				return whttp.get(url);
			},
			url);

		if(!html){
			return null, err, code; 
		}
		return ..web.json.parse(html);
	}
	
	getWsDebugPath = function(host, port){
		var tab, err, code = this.getRemoteInfo(host, port, "/json");
		if(!tab){
			return null, "网络连接有误，获取 webSocketDebuggerUrl 失败，原因：" ++ err; 
		}
		if(!#tab){
			return null, "没有可用 websocket 目标的列表"; 
		}
		
		var pages = {};
		for(i=1;#tab;1){
			if(tab[i].type == "page"){
				..table.push(pages, tab[i]);
			}
		}
		
		if(!#pages){
			return null, "获取 webSocketDebuggerUrl 失败"; 
		}
		var uri = ..inet.url.split(pages[1].webSocketDebuggerUrl);
		return uri.path; 		
	}
		
	closeChrome = function(){
		if(chromePid){
			..process.kill(chromePid);
			chromePid = null;
		}
	}
	
	open = function(headless, userDataDir, port){
		this.closeChrome();
		
		var ok, err = this.openChrome(headless, userDataDir, port);
		if(!ok){
			return false, "启动 chrome 失败，原因：" ++ err; 
		}
		
		var wsPath, err = this.getWsDebugPath(this.chromeHost, this.chromePort);
		if(!wsPath){
			return false, err; 
		}
		..thread.set("wsPath", wsPath);
		return true;
	}
	
	newTab = function(){
		
	}
	
	activateTab = function(targetId){
		
	}
	
	closeTab = function(targetId){
		
	}
	
	connect = function(){
		var ok, err = component.start(this.chromeHost, this.chromePort);
		if(!ok){
			return null, "连接 chrome 失败，原因：" ++ err; 
		}
		return this.waitEvent("connectChrome"); 
	}
	
	run = function(func, ...){
		this.init();
		var fib, err = ..fiber.create(
			function(...){
				if this[["onBegin"]] this.onBegin();
				func(...);
				if this[["onEnd"]] this.onEnd();
			}); 
			
		if(!fib){
			return null, "创建 fiber 失败，原因：" ++  err; 
		}
		var ok, err = ..fiber.resume(fib, ...);	
		if(!ok){
			return false, "启动 fiber 失败，原因：" ++  err; 
		}
		currentFiber = fib;
		return true; 
	}


	send = function(method, params){
		requestId++;
		var json = ..web.json.stringify(
			id = requestId;
			method = method;
			params = params;
		);
		var ok = component.sendWsMessage(json);
		if(!ok){
			return false, "发送请求数据失败"; 
		}
		return requestId; 
	}

	xcall = function(method, params){
		var requestId, err = this.send(method, params);
		if(!requestId){
			return null, err; 
		}
		return yield(requestId); 
	}
	
	@_meta;	
}
namespace dp{
    namespace ..global{
        import aaz.chrome.dp.methods;	
    }
    var methods = methods;
    
    _meta = {
    	_get = function(k){
    		var tt = type(k)
    		if(tt == type.string){
    			if(owner[["method"]]){
    				k = owner[["method"]] ++ "." ++ k;  
    			}
    			owner[[k]] = {
    				xcall = owner.xcall;
    				method = k;
    				@_meta;
    			}
    			return owner[[k]]; 
    		}
    	}
	
    	_call = function(params){
    		var m = ..string.match(owner.method, "^(\a+?)\.");
    		if(!methods[m]){
    			error("调用了不支持的 Chrome DevTools Protocol 方法 " ++ owner.method, 1);
    		}
    		return owner.xcall(owner.method, params); 	
    	}	
    }  	
}
// https://chromedevtools.github.io/devtools-protocol/
/**intellisense(aaz.chrome)
dp = 谷歌开发者工具协议辅助库
dp(.(谷歌浏览器exe路径 可选) = 创建谷歌开发者工具协议辅助对象
dp() = !cdp.
end intellisense**/

/**intellisense(!cdp)
timeout = 设置单次请求超时，单位毫秒，默认 10000
open(.(开启无头模式, 临时目录, 端口) = 打开浏览器，所有参数可选，默认不开启无头模式\n\n注：要多开浏览器请指定不同的临时目录，否则同时只能运行一个
connect() = 连接浏览器，成功返回 true， 失败返回 false，错误信息
run(.(任务函数, 不定参数) = 运行任务函数
waitEvent("事件名字") = 等待指定事件到达，成功返回一个表
end intellisense**/