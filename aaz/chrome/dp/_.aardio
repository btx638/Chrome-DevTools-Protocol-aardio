import chrome.path;
import process;
import wsock;
import inet.whttp;
import inet.url;
import web.json;
import thread.command;
import aaz.async;
import aaz.libhpsocket.app.simpleWebsocketClient.ws;

namespace aaz.chrome;
class dp{
	ctor(){	
		this.chromeHost = null; 
		this.chromePort = null;
		
		var async = ..aaz.async();

		var requestId = 0;
		var chromeMainPid;
		var methodsOfListen = {};
				
		var doMsg = function(msg){
			if(!msg){
				return ; 
			}

			var t = ..web.json.tryParse(msg)
			if(type(t) != type.table){
				return ; 
			}	
			// 回复
			if(t.id){
				if(t.error){
					async.resume(t.id, null, t.error.message);
				}
				else {
					async.resume(t.id, t.result);
				}
			} // 订阅事件
			elseif(t.method){ 
				async.resume(t.method, t.params)

				if(methodsOfListen[t.method]){
					async.run(methodsOfListen[t.method], null, null, t.params)
				}

				
				// 浏览器关闭
				if(t.method == "Inspector.detached"){
					chromeMainPid = null;
				}
			}	
		}
		

		var ws = ..aaz.libhpsocket.app.simpleWebsocketClient.ws();
		ws.on("open", lambda() async.resume("connectChrome", true));
	//	ws.on("close", lambda() async.resume("connectChrome", false));
		ws.on("message", doMsg)
		
		async.startCheckTimeout(9000, 200);
		
		..table.gc(this, "close");
	};
	setTimeout = function(timeout, interval){
		async.timeout = timeout;
		if(interval){
			async.checkTimeoutInterval = interval;
		}
	};
	close = function(){
		this.closeChrome();
		async.close();
		ws.close();
	};
	on = function(method, callback){
		methodsOfListen[method] = callback;
	};
	run = function(func, onStart, onComplete, ...){
		return async.run(func, onStart, onComplete, ...); 
	};
	closeChrome = function(){
		if(chromeMainPid){
			this.run(
				function() {this.Browser.close()}
			)
		}
	};
	waitEvent = function(name){
		return async.await(name); 
	};	
	open = function(chromePath, headless=false, userDataDir="\chrome.remote.userdata", port, disableGpu=true){
		this.closeChrome();
		if(chromePath){
			if(!..io.exist(chromePath)){
				error(chromePath ++ " 文件不存在",2);
			}
		}
		else {
			chromePath = ..chrome.path();
			if(!chromePath){
				return null, "找不到 chrome 浏览器";
			}
		}
		
		port := ..wsock.getFreePort();
		if(!port){
			return null, "获取空闲端口失败，请指定端口"; 
		}
		var cmd = {
			"--remote-debugging-port=" ++ port;
		}
		if(userDataDir){
			var path = ..io.createDir(userDataDir) 
			..table.push(cmd, "--user-data-dir=" ++ path) 
		}
			
		if(disableGpu){
			..table.push(cmd, "--disable-gpu");
		}
		if(headless){
			..table.push(cmd, "--headless");
		}
	
		cmd = ..string.join(cmd, " ");
		var pid, err = ..process.execute(chromePath, cmd);
		if(!pid){
			return null, "启动 chrome 失败，原因：" ++ err; 
		}
		
		chromeMainPid = pid;
		this.chromeHost = "localhost";
		this.chromePort = port;
		return true; 
	};
	getAvailableWebsocketTargets = function(host, port, path){
		var url = "http://" ++ host ++ ":" ++ port ++ path;
		var html, err, code = ..thread.invokeAndWait(
			function(url){
				import inet.whttp;
				
				var whttp = inet.whttp();
				whttp.setTimeouts(3000, 3000, 3000);
				return whttp.get(url);
			},
			url
		);
	
		if(!html){
			return null, err, code; 
		}
		return ..web.json.parse(html);
	};
	getDebugPages = function(host, port){
		var tab, err, code = this.getAvailableWebsocketTargets(host, port, "/json");
		if(!tab){
			return null, "网络连接有误，获取 debugPages 失败，原因：" ++ err; 
		}
		if(!#tab){
			return null, "没有可用 websocket 目标的列表"; 
		}
		
		var pages = {};
		for(i=1;#tab;1){
			if(tab[i].type == "page"){
				..table.push(pages, tab[i]);
			}
		}
		return pages; 	
	}
	getWebSocketDebuggerUrl = function(host, port){
		var pages, err = this.getDebugPages(host, port);
		if(!pages){
			return null, err; 
		}
		if(!#pages){
			return null, "没有debugPages"; 
		}
		return pages[1].webSocketDebuggerUrl; 		
	};	
	connect = function(chromeHost, chromePort){
		chromeHost := this.chromeHost
		chromePort := this.chromePort
		var url, err = this.getWebSocketDebuggerUrl(chromeHost, chromePort);
		if(!url){
			return false, err; 
		}

		var ok, err = ws.connect(url);
		if(!ok){
			return null, "连接 chrome 失败，原因：" ++ err; 
		}
		return this.waitEvent("connectChrome"); 
	};
	send = function(method, params){
		requestId++;

		var json = ..web.json.stringify(
			id = requestId;
			method = method;
			params = params;
		);
		var ok = ws.send(json);
		if(!ok){
			return false, "ws 发送请求失败"; 
		} 
		return requestId, method; 
	};
	xcall = function(method, params){
		var requestId, err = this.send(method, params);
		if(!requestId){
			return null, err; 
		}
		return async.await(requestId, err); 
	};
	@_meta;
}
namespace dp{
    namespace ..global{
        import aaz.chrome.dp.domain;
    }
    var domains = domain;

    _meta = {
    	_get = function(k){
    		if(type(k) == type.string){
    			if(owner[["method"]]){
    				k = owner[["method"]] ++ "." ++ k;  
    			}
				return	{
    				xcall = owner.xcall;
    				send = owner.send;
    				method = k;
    				@_meta;
    			}	
    		}
    	};
    	_call = function(params){
    		var m = ..string.match(owner.method, "^(\a+)\.?");
    		if(domains[m]){
    			return owner.xcall(owner.method, params); 
    		}
    		elseif(m == "raw"){
    			m = ..string.match(owner.method, "^\a+\.(\a+)\.?");
    			if(domains[m]){
    				m = ..string.match(owner.method, "^\a+\.(.+)$");
    				return owner.send(m, params); 
    			}
    		}
			error("调用了不支持的 Chrome DevTools Protocol 方法 " ++ owner.method, 2);	
    	};	
    }  	
}
// https://chromedevtools.github.io/devtools-protocol/
/**intellisense(aaz.chrome)
dp = 谷歌开发者工具协议辅助库，特点是用纤程把异步回调转为同步调用
dp() = 创建谷歌开发者工具协议辅助对象\n!cdp.
end intellisense**/

/**intellisense(!cdp)
setTimeout(.(超时, 检查超时间隔) = 设置请求超时，单位毫秒，默认 10000\n参数@1：超时\n参数@2可选：检查超时的间隔，就是多长时间检测一次
open(.(chrome exe路径, 是否无头模式, 临时目录, 端口, 是否禁用GPU) = 打开浏览器，所有参数可选，默认不开启无头模式\n\n注：要多开浏览器请指定不同的临时目录，否则同时只能运行一个
connect() = 连接浏览器\n成功返回 true\n失败返回 false，错误信息
run(.(任务函数, 开始时回调函数, 结束时回调函数, 任务函数的不定参数) = 运行任务函数\n参数@1: 任务函数\n参数@2: 任务开始时触发的回调函数，可选\n参数@3: 任务结束时触发的回调函数, 可选\n参数@4: 任务的不定参数, 可选
waitEvent("事件名字") = 等待指定事件到达，成功返回一个表
Page = 与被检查页面相关的动作和事件都属于页面域\n!Page.
Target = 支持发现更多的目标，并允许附加到他们身上\n!Target.
Runtime = 运行时域通过远程评估和镜像对象来公开JavaScript运行时。\n评估结果以镜像对象的形式返回，该对象暴露了对象类型、字符串表示和唯一标识符，可用于进一步的对象引用。\n原始对象被保留在内存中，除非它们被显式释放或与它们对象组中的其他对象一起被释放。\n!Runtime.
Network = 网络域允许跟踪网络活动的页面。\n它公开关于http、文件、数据和其他请求和响应、它们的头、正文、时间等的信息\n!Network.
end intellisense**/

/**intellisense(!Page)
disable() = 禁用页面域通知
enable() = 启用页面域通知
getTargets() = 检索可用目标列表
navigate() = 将当前页面导航到给定的URL
bringToFront() = 将页面置于最前面（激活选项卡）
end intellisense**/

/**intellisense(!Target)
activateTarget() = 激活（聚焦）目标
attachToTarget() = 附加到给定id的目标上
createTarget() = 创建一个新页面
closeTarget() = 关闭目标。如果目标是一个页面，也会被关闭
detachFromTarget() = 分离给定的id的会话
getTargets() = 检索可用目标列表
setDiscoverTargets() = 控制是否发现可用的目标，并通过 targetCreated/targetInfoChanged/targetDestroyed 事件通知
end intellisense**/

/**intellisense(!Runtime)
enable() = 启用通过 executionContextCreated 事件报告执行上下文创建。启用报告后，将立即为每个现有执行上下文发送事件。
disable() = 禁用执行上下文创建的报告
compileScript() = 编译表达式
runScript() = 在给定上下文中运行具有给定id的脚本。
evaluate() = 对全局对象的表达式求值
getProperties() = 返回给定对象的属性。结果的对象组继承自目标对象。
end intellisense**/

/**intellisense(!Network)

end intellisense**/

