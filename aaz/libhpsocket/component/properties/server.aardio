import aaz.libhpsocket;

namespace aaz.libhpsocket.component.properties.server;
var _dll = ..aaz.libhpsocket._dll;

_topointer = function(){
    return owner.pServer; 
}

start = function(ip, port=0){
	if(_dll.HP_Server_StartW(owner.pServer, ip, port)){
		return true; 
	}
	return false, owner.lastError; 
}

stop = function(){
	if(_dll.HP_Server_StopB(owner.pServer)){
		return true; 
	}
	return false, owner.lastError; 
}

wait = function(milliseconds=-1){
	return _dll.HP_Server_WaitB(owner.pServer, milliseconds); 
}

send = function(connId,buffer,len){
	if( type(len) == type.number ){
	}
	elseif(buffer[["_struct"]]){
		len = ..raw.sizeof(buffer);
	}
	else {
		len = #buffer;
	}
	return _dll.HP_Server_SendB(owner.pServer, connId, buffer, len);
}

sendPart = function(connId, buffer, len, offset=1){
	if(type(len) == type.number){
	}
	elseif(buffer[["_struct"]]){
		len = ..raw.sizeof(buffer);
	}
	else {
		len = #buffer;
	}
	return _dll.HP_Server_SendPartB(owner.pServer, connId, buffer, len, offset-1);
}

sendPackets = function(connId, buffers, count){
	return _dll.HP_Server_SendPacketsB(owner.pServer, connId, buffers, count);
}

pauseReceive = function(connId, pause){
	return _dll.HP_Server_PauseReceiveB(owner.pServer, connId, pause); 
}

disconnect = function(connId, force){
	return _dll.HP_Server_DisconnectB(owner.pServer, connId, force);
}

disconnectLongConnections = function(period, force){
	return _dll.HP_Server_DisconnectLongConnectionsB(owner.pServer, period, force);
}

disconnectSilenceConnections = function(period, force){
	return _dll.HP_Server_DisconnectSilenceConnectionsB(owner.pServer, period, force);
}

setConnectionExtra = function(connId, pExtra){
	return _dll.HP_Server_SetConnectionExtraB(owner.pServer, connId, pExtra);
}

getConnectionExtra = function(connId){
 	var result = {ptr value}
	return 
		_dll.HP_Server_GetConnectionExtraB(owner.pServer, connId, result), 
		result.value;	
}

getAllConnectionIds = function(){
	var s = { ADDR array[] = {INT length} };
	
	_dll.HP_Server_GetAllConnectionIDs(owner.pServer, null, s.array);
	if(s.array.length == 0){
		return null; 
	}
	
	_dll.HP_Server_GetAllConnectionIDs(owner.pServer, s, s.array);
	return s.array;
}

getListenAddress = function(){
	var address ={ WORD value[60] };
	var addressLen = { int value = 60 };
	var port = { WORD value };
	
	if( _dll.HP_Server_GetListenAddress(owner.pServer, address, addressLen, port))
		return address.value, port.value;
}

getLocalAddress = function(connId){
	var address ={ WORD value[60] };
	var addressLen = { int value = 60 };
	var port = { WORD value };
	
	if( _dll.HP_Server_GetLocalAddress(owner.pServer, connId, address, addressLen, port))
		return address.value, port.value;
}

getRemoteAddress = function(connId){
	var address ={ WORD value[60] };
	var addressLen = { int value = 60 };
	var port = { WORD value };
	
	if( _dll.HP_Server_GetRemoteAddress(owner.pServer, connId, address, addressLen, port))
		return address.value, port.value;
}

getConnectPeriod = function(connId){
	var period = {INT value} 
	return _dll.HP_Server_GetConnectPeriodB(owner.pServer, connId, period), period.value;
}

getSilencePeriod = function(connId){
	var period = {INT value} 
	return _dll.HP_Server_GetSilencePeriodB(owner.pServer, connId, period), period.value;
}

getPendingDataLength = function(connId){
	var pending = {int value} 
	return _dll.HP_Server_GetPendingDataLengthB(owner.pServer, connId, pending), pending.value;
}

isPauseReceive = function( connId ){
	var result = { bool value };
	return _dll.HP_Server_IsPauseReceiveB(owner.pServer, connId, result), result.value; 
}

isSecure = {
	_get = function(){
		return _dll.HP_Server_IsSecureB(owner.pServer);
	}
}

hasStarted = {
	_get = function(){
		return _dll.HP_Server_HasStartedB(owner.pServer);
	}
}

state = {
	_get = function(){
		return _dll.HP_Server_GetState(owner.pServer);
	}
}

lastError = {
    _get = function(){
    	return _dll.HP_Server_GetLastError(owner.pServer);
    }
}

lastErrorDesc = {
    _get = function(){
    	var p = _dll.HP_Server_GetLastErrorDescP(owner.pServer);
    	if( p ){
    		return ..raw.str(p,true); 
    	}
    }
}

isConnected = function(connId){
    return _dll.HP_Server_IsConnectedB(owner.pServer, connId); 
}


connectionCount = {
    _get = function(){
    	return _dll.HP_Server_GetConnectionCount(owner.pServer); 
    }
}

reuseAddressPolicy = {
    _get = function(){
    	return _dll.HP_Server_GetReuseAddressPolicy(owner.pServer); 
    }; 
    _set = function(v){
    	_dll.HP_Server_SetReuseAddressPolicy(owner.pServer, v);
    } 
}

sendPolicy = {
    _get = function(){
    	return _dll.HP_Server_GetSendPolicy(owner.pServer); 
    };
    _set = function(v){
    	_dll.HP_Server_SetSendPolicy(owner.pServer, v);
    } 
}

onSendSyncPolicy = {
    _get = function(){
    	return _dll.HP_Server_GetOnSendSyncPolicy(owner.pServer); 
    };   
    _set = function(v){
    	_dll.HP_Server_SetOnSendSyncPolicy(owner.pServer, v);
    } 
}

freeSocketObjLockTime = {
    _get = function(){
    	return _dll.HP_Server_GetFreeSocketObjLockTime(owner.pServer); 
    };  
    _set = function(v){
    	_dll.HP_Server_SetFreeSocketObjLockTime(owner.pServer, v);
    } 
}

freeSocketObjPool = {
    _get = function(){
    	return _dll.HP_Server_GetFreeSocketObjPool(owner.pServer); 
    };
    _set = function(v){
    	_dll.HP_Server_SetFreeSocketObjPool(owner.pServer, v);
    } 
}

freeBufferObjPool = {
    _get = function(){
    	return _dll.HP_Server_GetFreeBufferObjPool(owner.pServer); 
    }; 
    _set = function(v){
    	_dll.HP_Server_SetFreeBufferObjPool(owner.pServer, v);
    } 
}

freeSocketObjHold = {
    _get = function(){
    	return _dll.HP_Server_GetFreeSocketObjHold(owner.pServer); 
    };    
    _set = function(v){
    	_dll.HP_Server_SetFreeSocketObjHold(owner.pServer, v);
    } 
}

freeBufferObjHold = {
    _get = function(){
    	return _dll.HP_Server_GetFreeBufferObjHold(owner.pServer ); 
    };    
    _set = function(v){
    	_dll.HP_Server_SetFreeBufferObjHold(owner.pServer, v);
    } 
}

maxConnectionCount = {
    _get = function(){
    	return _dll.HP_Server_GetMaxConnectionCount( owner.pServer); 
    };    
    _set = function(v){
    	_dll.HP_Server_SetMaxConnectionCount(owner.pServer, v);
    } 
}

workerThreadCount = {
    _get = function(){
    	return _dll.HP_Server_GetWorkerThreadCount(owner.pServer); 
    };    
    _set = function(v){
    	_dll.HP_Server_SetWorkerThreadCount(owner.pServer, v);
    } 
}

isMarkSilence = {
    _get = function(){
    	return _dll.HP_Server_IsMarkSilenceB(owner.pServer); 
    };   
    _set = function(v){
    	_dll.HP_Server_SetMarkSilence(owner.pServer, v); 
    }
}