import util.metaProperty;

namespace aaz.libhpsocket.app;
class extra{
	ctor(){
		this@ = _metaProperty;
		// 子类的free方法会自动加入此列表
		this.freeList = {};
	};
	free = function(){
		this.data.value = null;	
	};
	// 存放原始的传输数据
	struct data = ..aaz.libhpsocket.app.extra.data();
}
namespace extra{
    _metaProperty = ..util.metaProperty(
    	_topointer = function(){
    		return owner.pointer; 
    	};
		update = function(){
			if(!owner.pointer){
				error("未绑定指针 ",2)
			}
			// 把结构体的数据写入指针
			..raw.convert(owner, owner.pointer); 
		};
		free = {
			_set = function(v){
				..table.push(owner.freeList, v)
			}
		}
		value = {
			_get = function(){
				if(!owner.pointer){
					// 创建动态指针存放结构体
					owner.pointer = ..raw.realloc(..raw.sizeof(owner), null, owner); 
					// 新建原始的通讯数据
					owner.data.new()
					// 写入指针
					owner.update()
				}
				return owner.pointer; 
			}
			_set = function(v){
				if(v === null){
					if(!owner.pointer){
						error("请先设置 pointer 再赋值为 null",2)	
					}
					// 释放各子类的数据
					for(i=1;#owner.freeList;1){
						owner.freeList[i]();
					}
					// 释放本身的指针
					owner.pointer = ..raw.realloc(0, owner.pointer);
					return ; 	
				}
				// 把外部指针的数据写入结构体
				..raw.convert(v, owner);
				owner.pointer = v; 
			}
		}
    )	
}

import aaz.libhpsocket.app.extra.data;