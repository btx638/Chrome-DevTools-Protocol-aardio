import web.json;

namespace aaz.libhpsocket.app.wsNodeServer;
class base{
	ctor( wsServer ){
		this._wsServer = wsServer;
		this._nodes = {};
		this._onlineNodeIds = {};
		var eventCallback = {};
		
		var sysCall = {};
		
		this._wsServer.on("message", function(connId, msg){
			var tab = ..web.json.parse(msg);
			select(tab.type) {
				case "register" {
					var name = tab.name;
					if(this.addNode(name, connId)){
						if(eventCallback.register) eventCallback.register(name);
						if(eventCallback.nodeUpdate) eventCallback.nodeUpdate(this._nodes);
					}
				}
				case "normal"{
					var name = tab.name;
					if(!name){
						return ; 
					}
					this.sendTo(name, tab.data);
				}
				case "system"{
					if(sysCall[tab.sender]){
						sysCall[tab.sender]( tab.data )
					}
				}
			}
		})
		
		this._wsServer.on("close", function(connId){
			var name = this.removeNodeById(connId);
			if (name) {
				if(eventCallback.close) eventCallback.close(name);
				if(eventCallback.nodeUpdate) eventCallback.nodeUpdate(this._nodes);
			}
		})
		

	};
	addNode = function(name, connId){
		if(this._onlineNodeIds[connId] == name){
			return false, "已在 node 列表"; 
		}
		if(!this._nodes[name]){
			this._nodes[name] = {};
		}
		..table.push(this._nodes[name], connId);
		
		this._onlineNodeIds[connId] = name;
		
		return true; 	
	};
	removeNodeById = function(connId){
		var name = this._onlineNodeIds[connId];
		if(name){
			..table.removeByValue(this._nodes[name], connId) 
			if(!#this._nodes[name]){
				this._nodes[name] = null
			}
			this._onlineNodeIds[connId] = null;	
			return name; 
		}
	};
	getOnlineNode = function(){
			
	};
	sendJson = function(connId, tab){
		return this._wsServer.send(connId, ..web.json.stringify(tab))
	};
	sendTo = function(name, data){
		for(i=1;#this._nodes[name];1){
			var id = this._nodes[name][i];
			if(this._onlineNodeIds[id]){
				this.sendJson(id, {
					type = "normal";
					data = data;
				});
			}
		}	
	};
	start = function(port){
		return this._wsServer.start(port); 
	};
	
	on = function(name, callback){
		eventCallback[name] = callback;
	};
	onNode = function(name, func){
		sysCall[name] = func
	};
	send = function(name, data){
		for(i=1;#this._nodes[name];1){
			var id = this._nodes[name][i];
			if(this._onlineNodeIds[id]){
				this.sendJson(id, {
					type = "server";
					data = data;
				});
			}
		}
	};			
}

