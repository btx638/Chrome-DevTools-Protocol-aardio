import aaz.libhpsocket.helper.httpClient;

namespace aaz.libhpsocket.app.websocket.client.handler;

// 读取 extra
var getUserExtra = function(extra){
	var userExtra = ..__userExtraClass__();
	userExtra.value = extra
	return userExtra; 		
}

// 发送升级请求	
var sendWsUpgradeRequest = function(component){
	var extra = getUserExtra(component.extra);
	var wsPath = extra.wsPath.value; 
	var wsOrigin = extra.wsOrigin.value; 
	
	wsPath = #wsPath ? wsPath : null
	var baseHeaders = #wsOrigin ? {["Origin"] = wsOrigin} : null
	
	
	var wsKey = ..aaz.libhpsocket.helper.httpClient.sendWsUpgradeRequest2(
				component, 
				wsPath,
				baseHeaders);
				
	if(wsKey){
		// 保存升级 key
		extra.wsKey.value = wsKey; 
		extra.update();
		return true; 
	}
	
}

var checkWsUpgradeResponse = function(component){
    var extra = getUserExtra(component.extra);	
    var wsKey = extra.wsKey.value; 
    
	return ..aaz.libhpsocket.helper.httpClient.checkWsUpgradeResponse2(component, wsKey);
}

parseFixedHeaderMsg = function(extra){	
	//  剩余数据的长度
	var unreadLen = ..raw.sizeof(extra.pData);
	//  读取指针，始终指向数据的头部
	var offset = 0;

	while(true){	
		// 标准消息长度	
		var packetLen = owner.getPacketLen(extra.pData, offset)

		// 不完整
		if(unreadLen < packetLen){
			extra.toUnread(offset, unreadLen);
			return ; 
		}

		if(owner.onPacket){
			owner.onPacket(topointer(extra.pData, offset), packetLen);
		}
		
		// 偏移到下个数据
		offset += packetLen;
		
		unreadLen -= packetLen;
		// 读完了
		if(unreadLen == 0){ 
			extra.reset();
			return ; 
		}
	}		
}

onHandShake = function(component){ 
	return sendWsUpgradeRequest(component)
}

onUpgrade = function(component, upgradeType){
	if(upgradeType != 1/*_HUT_WEB_SOCKET*/ ){
		return 2/*_HR_ERROR*/; 
	}
	
	if(!checkWsUpgradeResponse(component)){
		return 2/*_HR_ERROR*/; 
	}

	if(owner.afterUpgrade){
		var res = owner.afterUpgrade(getUserExtra(component.extra))
		if(res){ 
			component.sendWsMessage(res);
		}
	}
}

onWsMessageHeader = function(component, final, reserved, opCode, mask, bodyLen){

}

onWsMessageBody = function(component, pData, len){ 
	var extra = getUserExtra(component.extra);
	extra.data.concat(pData, len);
	extra.update()
}

onWsMessageComplete = function(component){
	var state = component.getWsMessageState();
	if(state[["opCode"]] == 0x9/*Ping*/){
		component.sendWsMessage(null, 0xA/*Pong*/);
	}
	elseif(state[["opCode"]] == 0x1/*text*/){ 
		var extra = getUserExtra(component.extra);
		if(owner.onTextMsg){
			var str = extra.data.getString();
			owner.onText(str)
		}
		extra.data.new()
		extra.update()
	}
	elseif( state[["opCode"]] == 0x2/*bin*/ ){
		if(owner.onBinMsg){
			var extra = getUserExtra(component.extra);
			owner.onBinMsg(extra)
		}
	}
}

onClose = function(component){
	var extra = getUserExtra(component.extra);
	extra.value = null;
	component.extra = null;
	
	..__postUi__("onClose")
}