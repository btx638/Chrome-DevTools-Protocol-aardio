import thread.command;
import util.metaProperty;
import aaz.libhpsocket.ssl.component.httpClient;
import aaz.libhpsocket.ssl.listener.httpClient;
import aaz.libhpsocket.app.client;

namespace aaz.libhpsocket.app.websocket.ssl;
class client{
	ctor(handlerPath, userDataPath){	
		var listener = ..aaz.libhpsocket.ssl.listener.httpClient(); 
		
		this = ..aaz.libhpsocket.app.client(listener, handlerPath, userDataPath)
		
		listener.onHandShake = function(component, connId){
			return __handler__.onHandShake(component);
		}
		
		listener.onUpgrade = function(component, connId, upgradeType){
			return __handler__.onUpgrade(component, upgradeType);	
		}
		
		listener.onWsMessageHeader = function(component, connId, final, reserved, opCode, mask, bodyLen){
			return __handler__.onWsMessageHeader(component, final, reserved, opCode, mask, bodyLen);
		}
		
		listener.onWsMessageBody = function(component, connId, pData, len){
			return __handler__.onWsMessageBody(component, pData, len);	
		}
		
		listener.onWsMessageComplete = function(component, connId){
			return __handler__.onWsMessageComplete(component);
		}
		
		listener.onClose = function(component, connId, enOperation, errCode){
			return __handler__.onClose(component, connId, enOperation, errCode);
		}
		
		var component = ..aaz.libhpsocket.ssl.component.httpClient(listener);
		component.setupSSLContext(0)
	};
	// 必须手动关闭，不要放在自动析构里面
	close = function(){
		if(listener){
			component.destroy()
			listener.destroy()
				
			component = null;
			listener = null;
		}
	};
	start = function(ip, port){
		if(this.userData){
			component.extra = this.userData.buildExtra();
		}
		
		if(!component.start(ip, port, false)){
			this._clearUserData();
			return false; 
		}
		this.ip = ip;
		this.port = port;
		
		return true; 
	};

	isDisconnect = function(){
		return component.state == 3; 
	};
	_reconnect = function(){
		return this.connect(this.ip, this.port); 
	};
	_clearUserData = function(){
		if(this.userData){
			this.userData.freeExtra()
			component.extra = null
			this.userData = null
		}	
	};
	@_metaProperty;
}
namespace client{
    _metaProperty = ..util.metaProperty(
    	userData = {
    		_get = function(){ 
    		}
    		_set = function( value ){
    		    if(value === null){
    		    	
    		    }
    		    else {
    		    	
    		    }
    		} 	
    	};
    )	
}
