import aaz.libhpsocket.listener.httpAgent;

namespace aaz.libhpsocket.ssl.listener;
class httpAgent{
	ctor(){
		this = ..aaz.libhpsocket.listener.httpAgent("ssl.component.httpAgent");
	};
}

/**intellisense(aaz.libhpsocket.ssl.listener)
httpAgent = http httpAgent 监听器类
httpAgent() = 创建 ssl http httpAgent 监听器\n!httpAgent.
end intellisense**/

/**intellisense(!httpAgent)
onPrepareConnect = @.onPrepareConnect = function(component, soListen){
	__/*准备监听，绑定监听地址前触发*/
}
onConnect = @.onHandShake = function(component, connId){
	__/*成功建立连接后触发*/
}
onHandShake = @.onHandShake = function(component, connId){
	__/*握手完成时触发*/
}
onSend = @.onHandShake = function(component, connId, pData, length){
	__/*数据发送成功后触发*/
}
onClose = @.onClose = function(component, connId, operation, errorCode){
	__/*连接正常或异常关闭时触发*/
}
onShutdown = @.onClose = function(component){
	__/*通信组件停止后触发*/
}
onReceive = @.onHandShake = function(component, connId, pData, length){
	__/*接收到数据时触发*/
}
onMessageBegin = @.onMessageBegin = function(component, connId){
	__/*开始解析事件*/
}
onStatusLine = @.onMessageBegin = function(component, connId, statusCode, desc){
	__/*状态行解析完成事件*/
}
onHeader = @.onHeader = function(component, connId, name, value){
	__/*请求头事件*/
}
onHeadersComplete = @.onHeadersComplete = function(component, connId){
	__/*请求头完成事件*/
}
onBody = @.onBody = function(component, connId, pData, len){
	__/*BODY 报文事件*/
}
onChunkHeader = @.onChunkHeader = function(component, connId, length){
	__/*Chunked 报文头事件*/
}
onChunkComplete = @.onChunkComplete = function(component, connId){
	__/*Chunked 报文结束事件*/
}
onMessageComplete = @.onMessageComplete = function(component, connId){
	__/*完成解析事件*/
}
onUpgrade = @.onUpgrade = function(component, connId, upgradeType){
	__/*升级协议*/
}
onParseError = @.onParseError = function(component, connId, errorCode, errorDesc){
	__/*解析错误*/
}
onWsMessageHeader = @.onWsMessageHeader = function(component, connId, final, reserved, operationCode, mask, bodyLen){
	__/*Web Socket 数据包头*/
}
onWsMessageBody = @.onWsMessageBody = function(component, connId, pData, length){
	__/*Web Socket 数据包体*/
}
onWsMessageComplete = @.onWsMessageComplete = function(component, connId){
	__/*Web Socket 数据包完成事件*/
}

end intellisense**/