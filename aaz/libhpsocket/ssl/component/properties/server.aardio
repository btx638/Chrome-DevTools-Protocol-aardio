import aaz.libhpsocket.ssl;

namespace aaz.libhpsocket.ssl.component.properties.server;
var _dll = ..aaz.libhpsocket._dll;

setupSSLContext = function(verifyMode, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath, serverNameCallback){
	return !!_dll.HP_SSLServer_SetupSSLContextW(owner.pServer, verifyMode, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath, serverNameCallback);
}

setupSSLContextByMemory = function(verifyMode, pemCert, pemKey, keyPassword, caPemCert, serverNameCallback){
	return _dll.HP_SSLServer_SetupSSLContextByMemoryB(owner.pServer, verifyMode, pemCert, pemKey, keyPassword, caPemCert, serverNameCallback); 
}

addSSLContext = function(verifyMode, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath){
	return _dll.HP_SSLServer_AddSSLContextW(owner.pServer, verifyMode, pemCertFile, pemKeyFile, keyPassword, caPemCertFileOrPath); 
}

addSSLContextByMemory = function(verifyMode, pemCert, pemKey, keyPassword, caPemCert){
	return _dll.HP_SSLServer_AddSSLContextByMemory(owner.pServer, verifyMode, pemCert, pemKey, keyPassword, caPemCert); 
}

bindSSLServerName = function( serverName, contextIndex ){
	return !!_dll.HP_SSLServer_BindSSLServerNameW(owner.pServer, serverName, contextIndex); 
}

cleanupSSLContext = function(){
	_dll.HP_SSLServer_CleanupSSLContext(owner.pServer);
}

startSSLHandShake = function(connId){
	return _dll.HP_SSLServer_StartSSLHandShakeB(owner.pServer, connId);
}

getSSLSessionInfo = function(connId, sslSessionInfo){
	var info = {ptr value}
	return _dll.HP_SSLServer_GetSSLSessionInfoB(owner.pServer, connId, sslSessionInfo, info), info.value; 
}

isSSLAutoHandShake = {
    _get = function(){
    	return _dll.HP_SSLServer_IsSSLAutoHandShakeB(owner.pServer); 
    }
    
    _set = function(v){
    	_dll.HP_SSLServer_SetSSLAutoHandShake(owner.pServer, v);
    } 
}

sslCipherList = {
    _get = function(){
    	var p = _dll.HP_SSLServer_GetSSLCipherList(owner.pServer);
    	if(p){
    		return ..raw.str(p,true); 	
    	}
    }
    
    _set = function(v){
    	_dll.HP_SSLServer_SetSSLCipherListW( owner.pServer, v);
    } 
}	

