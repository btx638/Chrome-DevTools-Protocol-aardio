import aaz.libhpsocket.helper.httpClient;

namespace aaz.libhpsocket.handler.websocket.client;

var getUserExtra = function(extra){
	var userdata = ..__userData__();
	userdata.fromExtra(extra)
	return userdata; 		
}
	
var saveWsUpgradeRequestKey = function(component, wsKey){
	var userdata = getUserExtra(component.extra);
	userdata.wsKey = wsKey;
	userdata.updateExtra();
}

var sendWsUpgradeRequest = function(component){
	var userdata = getUserExtra(component.extra);
	var wsPath = userdata.wsPath; 
	var wsOrigin = userdata.wsOrigin;

	wsPath = ..string.str(wsPath) 
	wsOrigin = ..string.str(wsOrigin)
	
	wsPath = #wsPath ? wsPath : null
	var baseHeaders = #wsOrigin ? {["Origin"] = wsOrigin} : null
	

	return ..aaz.libhpsocket.helper.httpClient.sendWsUpgradeRequest(
				component, 
				wsPath,
				baseHeaders,
				saveWsUpgradeRequestKey);
}

var checkWsUpgradeResponse = function(component){
    var extra = getUserExtra(component.extra);	
    var wsKey = extra.wsKey; 
    
	return ..aaz.libhpsocket.helper.httpClient.checkWsUpgradeResponse2(
				component, 
				wsKey);
}

onHandShake = function(component){
	return sendWsUpgradeRequest(component)
}

onUpgrade = function(component, upgradeType){

	if(upgradeType != 1/*_HUT_WEB_SOCKET*/ ){
		return 2/*_HR_ERROR*/; 
	}
	if(!checkWsUpgradeResponse(component)){
		return 2/*_HR_ERROR*/; 
	}

	if(owner.afterUpgrade){
		var res = owner.afterUpgrade(getUserExtra(component.extra))
		if(res){
			component.sendWsMessage(res);
		}
	}
}

onWsMessageHeader = function(component, final, reserved, opCode, mask, bodyLen){
}


onWsMessageBody = function(component, pData, len){ 
	var userdata = getUserExtra(component.extra);
	userdata.concat(pData,len);
}

onWsMessageComplete = function(component){
	var state = component.getWsMessageState();
	if(state[["opCode"]] == 0x9/*Ping*/){
		component.sendWsMessage(null, 0xA/*Pong*/);
		return ; 
	}
	
	var extra = getUserExtra(component.extra);
	
	// 完全是用户自己处理消息
	if(owner.userParseMsg){
		owner.userParseMsg(extra)
		return ; 
	}
	
	// 头部 + 数据部结构的消息
		
	//  剩余数据的长度
	var unreadLen = ..raw.sizeof(extra.pData);
	//  读取指针，始终指向数据的头部
	var offset = 0;

	while(true){	
		// 消息的要求长度	
		var packetLen = owner.getPacketLen(extra.pData, offset)

		// 不完整
		if(unreadLen < packetLen){
			extra.toUnread(offset, unreadLen);
			return ; 
		}
		
		// 含有特殊的非标准的消息
		if(owner.specialPacket){
			if(owner.specialPacket(extra.pData) === true){
				extra.reset();
				return ; 
			}
		}

		if(owner.onPacket){
			var res = owner.onPacket(topointer(extra.pData, offset), packetLen);
			if(res){
				component.sendWsMessage(res);
			}
		}
		
		// 偏移到下个数据
		offset += packetLen;
		
		unreadLen -= packetLen;
		// 读完了
		if(unreadLen == 0){ 
			extra.reset();
			return ; 
		}
	}	
}

onClose = function(component){
	var userdata = getUserExtra(component.extra);
	userdata.freeExtra();
	..io.print("close")
	component.extra = null;
}
