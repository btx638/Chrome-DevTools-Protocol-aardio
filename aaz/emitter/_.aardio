
namespace aaz;
class emitter{
	ctor(groupName, user){
		this.__emitterGroup__ = group(groupName);
		this.__emitterUser__ = user;
	};
	on = function(evtName, user, proc){
		var events = this.__emitterGroup__.getEvents(evtName)
		
		var t = type(user)
		if(t == type.function){
			..table.push(events, {
				proc = user;
			})
		}
		elseif(t == type.string){
			if(type(proc) != type.function){
				error("当参数@2是指定消息发送者时，参数@3必须是函数",2)
			}
			..table.push(events, {
				user = user;
				proc = proc;
			})
		}

	};
	emit = function(evtName, ...){
		var events = this.__emitterGroup__.getEvents(evtName)
		for(i=1;#events;1){
			var evt = events[i];
			// 事件只能被特定用户调用
			if(evt.user){
				if(evt.user == this.__emitterUser__){
					evt.proc(...)
				}
			}
			else {
				evt.proc(...)
			}
			
		}	
	};
	bindSender = function(sender){
		return binder(this, sender);
	};		
}
namespace emitter{
	class group{
		ctor(name){
			if(name){
				if(__store__[name]){
					return __store__[name]; 
				}
				__store__[name] = this;	
			}	
			this._evts = {};
		};
		getEvents = function(name){
			if(!this._evts[name]){
				this._evts[name] = {}
			}
			return this._evts[name]; 
		};
	}
	namespace group{
		__store__ = {}	
	}
	
	class binder{
		ctor(emitter, sender){
			this.emitter = emitter;
			this.sender = sender;
		};
		on = function(evtName, proc){
			this.emitter.on(evtName, this.sender, proc )
			return this; 	
		}
	}		
}