
namespace aaz;
class emitter{
	ctor(groupName, user){
		var _group = ..aaz.emitter.group(groupName);
		var _emitterUser = user;
	}
	on = function(evtName, user, proc){
		if(type(evtName) == type.function){
			return ; 
		}
		
		if(type(evtName) != type.string){
			error("参数@1事件名称必须是字符串",2)
		}
		
		var events = _group.getEvents(evtName);
		var p2T = type(user);
		
		if(p2T == type.function){
			..table.push(events, {proc = user;})
			return ; 
		}
		
		if(p2T == type.string){
			if(type(proc) != type.function){
				error("当参数@2是指定消息发送者时，参数@3必须是函数",2)
			}
			..table.push(events, {user = user;proc = proc;})
			return ; 
		}	
	};
	emit = function(evtName, ...){
		var events = _group.getEvents(evtName)
		for(i=1;#events;1){
			var evt = events[i];
			// 事件只能被特定用户调用
			if(evt.user){
				if(evt.user == _emitterUser){
					evt.proc(...)
				}
			}
			else {
				evt.proc(...)
			}
			
		}	
	};
	bindSender = function(sender){
		return ..aaz.emitter.binder(this, sender);
	};		
}
import aaz.emitter.group;
import aaz.emitter.binder;

/**intellisense(aaz)
emitter = 对象通讯
emitter() = 创建并加入匿名组，仅能限于对象内部通讯\n!aazemitter.
emitter(.("组名") = 加入指定组，多个对象互相通讯\n!aazemitter.
emitter(.("组名", "用户名") = 加入指定组，多个对象互相通讯，并指定自己的用户名\n!aazemitter.
end intellisense**/

/**intellisense(!aazemitter)
on(.("事件名称", 事件处理函数) = 订阅事件，并指定处理函数
on(.("事件名称",  "用户名", 事件处理函数) = 订阅事件，仅接收指定用户名发出的事件，并指定事件处理函数
emit(.("事件名称", 不定参数) = 触发事件，并把参数传递给处理函数
end intellisense**/